#!/usr/bin/make -f
# -*- makefile -*-
#
# Configures, builds and installs Bob on Debian systems.

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

# find out the name of the currently built package
DEB_SOURCE_PACKAGE := $(strip $(shell egrep '^Source: ' debian/control | cut -f 2 -d ':'))

#export PYBUILD_NAME=$(DEB_SOURCE_PACKAGE)

# Only compile for the default Python version
PY2VERS := $(shell pyversions -vr debian/control)

#export PYBUILD_AFTER_INSTALL=echo "** Custom bob rules: Run nosetests for the installed package **"; \
#	cd {build_dir}; \
#	if [ $(DEB_SOURCE_PACKAGE) != bob.extension ]; then \
#	  echo "Running nosetests for package $(DEB_SOURCE_PACKAGE)"; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv $(DEB_SOURCE_PACKAGE); \
#	else \
#		echo "Only selected tests are run for $(DEB_SOURCE_PACKAGE)"; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv $(DEB_SOURCE_PACKAGE).test_boost; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv $(DEB_SOURCE_PACKAGE).test_cmake; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv $(DEB_SOURCE_PACKAGE).test_pkgconfig; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv --exclude='test_documentation_generation' --exclude='test_find_packages' $(DEB_SOURCE_PACKAGE).test_utils; \
#	fi; \
#	echo "** Custom bob rules: run sphinx doctest to tests the documentation **"; \
#	cp -fr {dir}/doc {build_dir}; \
#	cd {build_dir}; \
#	PYTHONPATH=${PYTHONPATH}:.:{destdir}/{install_dir}:{dir}:{build_dir} http_proxy='127.0.0.1:9' sphinx-build -b doctest doc/ build/doc; \
#	rm -fr doc; \
#	rm -fr build;


%:
	dh $@ --with python2

#	dh $@ --with python2,sphinxdoc --buildsystem=pybuild
# override it, so there are no tests done here, since we perform them after the install
override_dh_auto_test:


override_dh_auto_install:
	dh_auto_install
	echo "** Custom bob rules: run nosetests and sphinx doctest for the installed package **"
	echo curdir: $(CURDIR)
	set -e; for v in $(PY2VERS) ; do \
		echo "-- running tests for python version "$$v" --" ; \
		install_dir=$(CURDIR)/debian/$(DEB_SOURCE_PACKAGE)/usr/lib/python$$v/dist-packages; \
		echo "Install Path $${install_dir}"; \
		ls $${install_dir}; \
		OS=$$(uname -s); \
		OS=$$(echo $${OS} | tr '[:upper:]' '[:lower:]'); \
		ARCH=$$(uname -m); \
		dir=lib.$${OS}-$${ARCH}-$$v; \
		build_dir=$(CURDIR)/build/$${dir}; \
		echo "Build Path: $${build_dir}"; \
		cd $${build_dir}; \
		if [ $(DEB_SOURCE_PACKAGE) = bob.extension ]; then \
			echo "Special case for bob.extension package - exclude some tests"; \
			PYTHONPATH=$${install_dir} nosetests -svv $(DEB_SOURCE_PACKAGE).test_boost --debug=nose.importer; \
			PYTHONPATH=$${install_dir} nosetests -svv $(DEB_SOURCE_PACKAGE).test_cmake --debug=nose.importer; \
			PYTHONPATH=$${install_dir} nosetests -svv $(DEB_SOURCE_PACKAGE).test_pkgconfig --debug=nose.importer; \
			PYTHONPATH=$${install_dir} nosetests -svv --exclude='test_documentation_generation' --exclude='test_find_packages' --exclude='test_get_config' $(DEB_SOURCE_PACKAGE).test_utils --debug=nose.importer; \
		elif [ $(DEB_SOURCE_PACKAGE) = bob.blitz ]; then \
			echo "Special case for bob.blitz - do not use PYTHONPATH variable, otherwise tests won't be found"; \
			PYTHONPATH=$${install_dir} nosetests -svv --debug=nose.importer; \
		else \
			echo "Running nosetests for package $(DEB_SOURCE_PACKAGE) - important to add PYTHONPATH, otherwise you get import error"; \
			PYTHONPATH=.:$${install_dir} nosetests -svv --debug=nose.importer; \
		fi; \
		cp -fr $(CURDIR)/doc $${build_dir} ; \
		cd $${build_dir}; \
		if [ $(DEB_SOURCE_PACKAGE) = bob.io.video ] || [ $(DEB_SOURCE_PACKAGE) = bob.io.matlab ] || [ $(DEB_SOURCE_PACKAGE) = bob.learn.linear ] || [ $(DEB_SOURCE_PACKAGE) = bob.learn.mlp ] || [ $(DEB_SOURCE_PACKAGE) = bob.ip.optflow.hornschunck ] || [ $(DEB_SOURCE_PACKAGE) = bob.ip.facedetect ] || [ $(DEB_SOURCE_PACKAGE) = bob.db.iris ] || [ $(DEB_SOURCE_PACKAGE) = bob.learn.em ] || [ $(DEB_SOURCE_PACKAGE) = bob ]; then \
			echo "############### TODO: no doctests for $(DEB_SOURCE_PACKAGE), because sphinx breaks on the self import (while importing bob.foo.bar, it cannot find bar). Need to figure out the reason for this, before doctests can be run for this package. The same problem that breaks sphinx doctest seem also prevents noestests finding tests correctly, so they are skipped for this package (see logs above). ############"; \
		else \
		PYTHONPATH=$${PYTHONPATH}:$${build_dir}:$${install_dir} http_proxy='127.0.0.1:9' sphinx-build -b doctest doc/ build/doc; \
		fi; \
		rm -fr doc; \
		rm -fr build; \
	done

# use $(DEB_BUILD_GNU_TYPE) if need to generate string that looks like x86_64-linux-gnu

#override_dh_auto_install:
#	dh_auto_install
#	echo {build_dir}
#	cd {build_dir}
#	if [ $(DEB_SOURCE_PACKAGE) != bob.extension ]; then \
#	  echo "Running nosetests for package $(DEB_SOURCE_PACKAGE)"; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv $(DEB_SOURCE_PACKAGE); \
#	else \
#		echo "Only selected tests are run for $(DEB_SOURCE_PACKAGE)"; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv $(DEB_SOURCE_PACKAGE).test_boost; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv $(DEB_SOURCE_PACKAGE).test_cmake; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv $(DEB_SOURCE_PACKAGE).test_pkgconfig; \
#		PYTHONPATH={destdir}/{install_dir} nosetests -sv --exclude='test_documentation_generation' --exclude='test_find_packages' $(DEB_SOURCE_PACKAGE).test_utils; \
#	fi
#	echo "** Custom bob rules: run sphinx doctest to tests the documentation **"
#	cd {dir}
#	PYTHONPATH={destdir}/{install_dir}:{dir}:{build_dir} http_proxy='127.0.0.1:9' sphinx-build -b doctest doc/ build/doc;


